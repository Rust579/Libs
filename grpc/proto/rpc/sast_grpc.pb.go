// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.1
// source: sast.proto

package rpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	SastService_Upload_FullMethodName = "/sast.SastService/Upload"
)

// SastServiceClient is the client API for SastService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Сервис для управления zip архивами
type SastServiceClient interface {
	Upload(ctx context.Context, opts ...grpc.CallOption) (SastService_UploadClient, error)
}

type sastServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSastServiceClient(cc grpc.ClientConnInterface) SastServiceClient {
	return &sastServiceClient{cc}
}

func (c *sastServiceClient) Upload(ctx context.Context, opts ...grpc.CallOption) (SastService_UploadClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &SastService_ServiceDesc.Streams[0], SastService_Upload_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &sastServiceUploadClient{ClientStream: stream}
	return x, nil
}

type SastService_UploadClient interface {
	Send(*UploadRequest) error
	CloseAndRecv() (*UploadResponse, error)
	grpc.ClientStream
}

type sastServiceUploadClient struct {
	grpc.ClientStream
}

func (x *sastServiceUploadClient) Send(m *UploadRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *sastServiceUploadClient) CloseAndRecv() (*UploadResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(UploadResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SastServiceServer is the server API for SastService service.
// All implementations must embed UnimplementedSastServiceServer
// for forward compatibility
//
// Сервис для управления zip архивами
type SastServiceServer interface {
	Upload(SastService_UploadServer) error
	mustEmbedUnimplementedSastServiceServer()
}

// UnimplementedSastServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSastServiceServer struct {
}

func (UnimplementedSastServiceServer) Upload(SastService_UploadServer) error {
	return status.Errorf(codes.Unimplemented, "method Upload not implemented")
}
func (UnimplementedSastServiceServer) mustEmbedUnimplementedSastServiceServer() {}

// UnsafeSastServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SastServiceServer will
// result in compilation errors.
type UnsafeSastServiceServer interface {
	mustEmbedUnimplementedSastServiceServer()
}

func RegisterSastServiceServer(s grpc.ServiceRegistrar, srv SastServiceServer) {
	s.RegisterService(&SastService_ServiceDesc, srv)
}

func _SastService_Upload_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SastServiceServer).Upload(&sastServiceUploadServer{ServerStream: stream})
}

type SastService_UploadServer interface {
	SendAndClose(*UploadResponse) error
	Recv() (*UploadRequest, error)
	grpc.ServerStream
}

type sastServiceUploadServer struct {
	grpc.ServerStream
}

func (x *sastServiceUploadServer) SendAndClose(m *UploadResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *sastServiceUploadServer) Recv() (*UploadRequest, error) {
	m := new(UploadRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SastService_ServiceDesc is the grpc.ServiceDesc for SastService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SastService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sast.SastService",
	HandlerType: (*SastServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Upload",
			Handler:       _SastService_Upload_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "sast.proto",
}
