// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.1
// source: trivyapi/proto/trivy.proto

package rpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	TrivyService_UploadStream_FullMethodName = "/trivy.TrivyService/UploadStream"
	TrivyService_UploadImage_FullMethodName  = "/trivy.TrivyService/UploadImage"
)

// TrivyServiceClient is the client API for TrivyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Определение сервиса с двумя методами
type TrivyServiceClient interface {
	// Метод для отправки zip-файла в виде []byte
	UploadStream(ctx context.Context, opts ...grpc.CallOption) (TrivyService_UploadStreamClient, error)
	// Метод для отправки массива строк
	UploadImage(ctx context.Context, in *ImageRequest, opts ...grpc.CallOption) (*Response, error)
}

type trivyServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTrivyServiceClient(cc grpc.ClientConnInterface) TrivyServiceClient {
	return &trivyServiceClient{cc}
}

func (c *trivyServiceClient) UploadStream(ctx context.Context, opts ...grpc.CallOption) (TrivyService_UploadStreamClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &TrivyService_ServiceDesc.Streams[0], TrivyService_UploadStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &trivyServiceUploadStreamClient{ClientStream: stream}
	return x, nil
}

type TrivyService_UploadStreamClient interface {
	Send(*ZipRequest) error
	CloseAndRecv() (*Response, error)
	grpc.ClientStream
}

type trivyServiceUploadStreamClient struct {
	grpc.ClientStream
}

func (x *trivyServiceUploadStreamClient) Send(m *ZipRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *trivyServiceUploadStreamClient) CloseAndRecv() (*Response, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *trivyServiceClient) UploadImage(ctx context.Context, in *ImageRequest, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, TrivyService_UploadImage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TrivyServiceServer is the server API for TrivyService service.
// All implementations must embed UnimplementedTrivyServiceServer
// for forward compatibility
//
// Определение сервиса с двумя методами
type TrivyServiceServer interface {
	// Метод для отправки zip-файла в виде []byte
	UploadStream(TrivyService_UploadStreamServer) error
	// Метод для отправки массива строк
	UploadImage(context.Context, *ImageRequest) (*Response, error)
	mustEmbedUnimplementedTrivyServiceServer()
}

// UnimplementedTrivyServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTrivyServiceServer struct {
}

func (UnimplementedTrivyServiceServer) UploadStream(TrivyService_UploadStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method UploadStream not implemented")
}
func (UnimplementedTrivyServiceServer) UploadImage(context.Context, *ImageRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadImage not implemented")
}
func (UnimplementedTrivyServiceServer) mustEmbedUnimplementedTrivyServiceServer() {}

// UnsafeTrivyServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TrivyServiceServer will
// result in compilation errors.
type UnsafeTrivyServiceServer interface {
	mustEmbedUnimplementedTrivyServiceServer()
}

func RegisterTrivyServiceServer(s grpc.ServiceRegistrar, srv TrivyServiceServer) {
	s.RegisterService(&TrivyService_ServiceDesc, srv)
}

func _TrivyService_UploadStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TrivyServiceServer).UploadStream(&trivyServiceUploadStreamServer{ServerStream: stream})
}

type TrivyService_UploadStreamServer interface {
	SendAndClose(*Response) error
	Recv() (*ZipRequest, error)
	grpc.ServerStream
}

type trivyServiceUploadStreamServer struct {
	grpc.ServerStream
}

func (x *trivyServiceUploadStreamServer) SendAndClose(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

func (x *trivyServiceUploadStreamServer) Recv() (*ZipRequest, error) {
	m := new(ZipRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _TrivyService_UploadImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrivyServiceServer).UploadImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TrivyService_UploadImage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrivyServiceServer).UploadImage(ctx, req.(*ImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TrivyService_ServiceDesc is the grpc.ServiceDesc for TrivyService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TrivyService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "trivy.TrivyService",
	HandlerType: (*TrivyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UploadImage",
			Handler:    _TrivyService_UploadImage_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UploadStream",
			Handler:       _TrivyService_UploadStream_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "trivyapi/proto/trivy.proto",
}
